<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>A Mandelbrot halmaz</title>
        <para>
                
        </para>
        <para>
           <programlisting language="c"><![CDATA[
           	// Copyright - no copyright

#include <png++/png.hpp>

#define N 500
#define M 500
#define MAXX 0.7
#define MINX -2.0
#define MAXY 1.35
#define MINY -1.35

void GeneratePNG(int tomb[N][M]) {
  png::image<png::rgb_pixel> image(N, M);

  for (int x = 0; x < N; ++x) {
    for (int y = 0; y < M; ++y) {
      image[x][y] = png::rgb_pixel(tomb[x][y], tomb[x][y], tomb[x][y]);
    }
  }
  image.write("kimenet.png");
}

struct Komplex {
  double re, im;
};


int main() {
  int tomb[N][M];

  int i, j, k;
  double dx = (MAXX - MINX) / N;
  double dy = (MAXY - MINY) / M;

  struct Komplex C, Z, Zuj;

  int iteracio;

  for (i = 0; i < M; ++i) {
    for (j = 0; j < N; ++j) {
      C.re = MINX + j * dx;
      C.im = MAXY - i * dy;

      Z.re = 0;
      Z.im = 0;
      iteracio = 0;

      while (Z.re * Z.re + Z.im * Z.im < 4 && iteracio++ < 255) {
        Zuj.re = Z.re * Z.re - Z.im * Z.im + C.re;
        Zuj.im = 2 * Z.re * Z.im + C.im;
        Z.re = Zuj.re;
        Z.im = Zuj.im;
      }
      tomb[i][j] = 256 - iteracio;
    }
  }
  GeneratePNG(tomb);

  return 0;
}]]></programlisting>

        </para>
        <para>
           A fenti kód a következő png képet fogja generálni:            
        </para>
        <mediaobject>
        	<imageobject condition="printf">
        		<imagedata fileref="img/kimenet.png" format="PNG" scale="30"/>
        	</imageobject>
        </mediaobject>
<para>
	Ez a mandelbrot halmaz síkbeli ábrázolása.A mandelbrot halmaz komplex számokból áll.Ezekre a számokra igaz az,hogy X(n+1)=Xn^2+c. És ez nem tart a végtelenbe, azaz korlátos.
	A forráskód fordításához szükség van egy -lpng kapcsolóra,ugyanis a kód tartalmazza a png++ header file-t, ez szükség a png generáláshoz.
	A kódunk elején deklarálunk pár konstans számot, majd a png generáló eljárást is.Ez paraméterül kap egy NxM-es két dimenziós tömböt.Egy 500x500 -as képet fog létrehozni, két for ciklus segítségével és a tömbben lévő értékek szerint vagy fehér lesz az adott pixel vagy fekete. Az eljárás végén write-al hozzuk létre a png-t.Ezután létrehozzuk a Komplex struktúrát amiben egy valós és egy komplex szám lesz.A main elején deklaráljuk a szükséges változókat, és létrehozunk 3 Komplex osztályú változót is.Ezután a megfelelő képletet használva feltöltjük a mátrixot a megfelelő értékekkel és átadjuk a GeneratePNG eljárásnak a mátrixot.
</para>
    </section>        
        
    <section>
        <title>A Mandelbrot halmaz a <filename>std::complex</filename> osztállyal</title>
        <para>
                
        </para>
        <para>
            <programlisting language="c"><![CDATA[
            	#include <iostream>
#include "png++/png.hpp"
#include <complex>

int
main ( int argc, char *argv[] )
{

  int szelesseg = 1920;
  int magassag = 1080;
  int iteraciosHatar = 255;
  double a = -1.9;
  double b = 0.7;
  double c = -1.3;
  double d = 1.3;

  if ( argc == 9 ) 
    {
      szelesseg = atoi ( argv[2] ); 
      magassag =  atoi ( argv[3] ); 
      iteraciosHatar =  atoi ( argv[4] ); 
      a = atof ( argv[5] ); 
      b = atof ( argv[6] );
      c = atof ( argv[7] );
      d = atof ( argv[8] );
    }
  else
    {
      std::cout << "Hasznalat: ./3.1.2 fajlnev szelesseg magassag n a b c d" << std::endl;
      return -1;
    }

  png::image < png::rgb_pixel > kep ( szelesseg, magassag ); 


  double dx = ( b - a ) / szelesseg; 
  double dy = ( d - c ) / magassag;
  double reC, imC, reZ, imZ;
  int iteracio = 0;

  std::cout << "Szamitas\n";

  for ( int j = 0; j < magassag; ++j )
    {
      

      for ( int k = 0; k < szelesseg; ++k )
        {

         
          reC = a + k * dx;
          imC = d - j * dy;
          std::complex<double> c ( reC, imC );

          std::complex<double> z_n ( 0, 0 );
          iteracio = 0;

          while ( std::abs ( z_n ) < 4 && iteracio < iteraciosHatar )
            {
              z_n = z_n * z_n + c;

              ++iteracio;
            }

          kep.set_pixel ( k, j,
                          png::rgb_pixel ( iteracio%255, (iteracio*iteracio)%255, 0 ) );
        }

      int szazalek = ( double ) j / ( double ) magassag * 100.0;
      std::cout << "\r" << szazalek << "%" << std::flush;
    }

  kep.write ( argv[1] );
  std::cout << "\r" << argv[1] << " mentve." << std::endl;

}]]></programlisting>

        </para>
        
                     <mediaobject>
        	<imageobject condition="printf">
        		<imagedata fileref="img/mandel.png" format="PNG" scale="30"/>
        	</imageobject>
        </mediaobject> 
        <para>
        	Ez a kód nem sokban különbözik az előzőtől. Bekerült a complex header file. Ezáltal nem kell struktúrát használnunk,hogy kezeljük a komplex számokat, hanem ez a header file fogja kivitelezni azt. 
        	A kód elején deklaráljuk a szükséges változókat. Futtatáskor meg kell adnunk a kép magasságát és szélességét, azt hogy milyen néven hozza létre a képet, és az n a b c d értékeit. Ezt követően a program beállítja a megfelelő értékekre a változókat. Ha viszont rosszul adtuk meg a dolgokat(pl kevés számot adtunk meg) akkor kiíratja a használatot.Ezután a szükséges méretet lefoglaljuk a majd létrejövő képünknek.Maga a számolás a while ciklusban történik. A program futása közben folyamatosan tájékoztat arról,hogy hány százaléknál jár a generálás és arról is ha sikeresen lementette a képet.
        </para>
    </section>        
                
    <section>
        <title>Biomorfok</title>
        <para>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/IJMbgRzY76E">https://youtu.be/IJMbgRzY76E</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf</link>
        </para>
        <para>
        	<programlisting language="c"><![CDATA[
#include <iostream>
#include "png++/png.hpp"
#include <complex>

int
main ( int argc, char *argv[] )
{

    int szelesseg = 1920;
    int magassag = 1080;
    int iteraciosHatar = 255;
    double xmin = -1.9;
    double xmax = 0.7;
    double ymin = -1.3;
    double ymax = 1.3;
    double reC = .285, imC = 0;
    double R = 10.0;

    if ( argc == 12 )
    {
        szelesseg = atoi ( argv[2] );
        magassag =  atoi ( argv[3] );
        iteraciosHatar =  atoi ( argv[4] );
        xmin = atof ( argv[5] );
        xmax = atof ( argv[6] );
        ymin = atof ( argv[7] );
        ymax = atof ( argv[8] );
        reC = atof ( argv[9] );
        imC = atof ( argv[10] );
        R = atof ( argv[11] );

    }
    else
    {
        std::cout << "Hasznalat: ./3.1.2 fajlnev szelesseg magassag n a b c d reC imC R" << std::endl;
        return -1;
    }

    png::image < png::rgb_pixel > kep ( szelesseg, magassag );

    double dx = ( xmax - xmin ) / szelesseg;
    double dy = ( ymax - ymin ) / magassag;

    std::complex<double> cc ( reC, imC );

    std::cout << "Szamitas\n";

    // j megy a sorokon
    for ( int y = 0; y < magassag; ++y )
    {
        // k megy az oszlopokon

        for ( int x = 0; x < szelesseg; ++x )
        {

            double reZ = xmin + x * dx;
            double imZ = ymax - y * dy;
            std::complex<double> z_n ( reZ, imZ );

            int iteracio = 0;
            for (int i=0; i < iteraciosHatar; ++i)
            {

                z_n = std::pow(z_n, 3) + cc;
                //z_n = std::pow(z_n, 2) + std::sin(z_n) + cc;
                if(std::real ( z_n ) > R || std::imag ( z_n ) > R)
                {
                    iteracio = i;
                    break;
                }
            }

            kep.set_pixel ( x, y,
                            png::rgb_pixel ( (iteracio*20)%255, (iteracio*40)%255, (iteracio*60)%255 ));
        }

        int szazalek = ( double ) y / ( double ) magassag * 100.0;
        std::cout << "\r" << szazalek << "%" << std::flush;
    }

    kep.write ( argv[1] );
    std::cout << "\r" << argv[1] << " mentve." << std::endl;

}]]></programlisting>
    
        </para> 
<mediaobject>
        	<imageobject condition="printf">
        		<imagedata fileref="img/bio.png" format="PNG" scale="30"/>
        	</imageobject>
        </mediaobject> 

        <para>
        	Ez a program lényegében Julia halmazokat fog létrehozni. Julia halmazokból végtelen mennyiségű van. Ennek a programnak az alapja az előző mandelbrotos program.A mandelbrot halmaz tartalmazza az összes Julia halmazt. 
        	A mandelbrotos programmal ellentétben itt a c nem változó lesz,hanem állandó, és a konzolról kérjük be. A kód elején megint csak létrehozzuk a megfelelő változókat. Majd bekérjük azokat és ha megfelelőek akkor a megfelelő változóhoz rendeljük azokat.Lefoglaljuk a helyet a képünknek. For ciklusukkal végig megyünk az összes pixelen és a megfelelő egyenlet segítségével kiszámoljuk az értékeket.Ez a program is jelzi,hogy hány százaléknál jár és hogy lementette-e már a képet.
        </para>


    </section>                     

    <section>
        <title>A Mandelbrot halmaz CUDA megvalósítása</title>
        <para>
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://progpater.blog.hu/2011/03/27/a_parhuzamossag_gyonyorkodtet?fbclid=IwAR0m3eiY15QU6jXNlQ8C0Y4qVF82tqUgbmfPSzvFphDchAnkcrAf0Occ2Zc">https://progpater.blog.hu/2011/03/27/a_parhuzamossag_gyonyorkodtet?fbclid=IwAR0m3eiY15QU6jXNlQ8C0Y4qVF82tqUgbmfPSzvFphDchAnkcrAf0Occ2Zc</link>
        </para>
         <para>
          <programlisting language="c"><![CDATA[
            #include <png++/image.hpp>
#include <png++/rgb_pixel.hpp>

#include <sys/times.h>
#include <iostream>


#define MERET 600
#define ITER_HAT 32000

_device_ int
mandel (int k, int j)
{



float a = -2.0, b = .7, c = -1.35, d = 1.35;
int szelesseg = MERET, magassag = MERET, iteraciosHatar = ITER_HAT;

float dx = (b - a) / szelesseg;
float dy = (d - c) / magassag;
float reC, imC, reZ, imZ, ujreZ, ujimZ;

int iteracio = 0;


reC = a + k * dx;
imC = d - j * dy;

reZ = 0.0;
imZ = 0.0;
iteracio = 0;

while (reZ * reZ + imZ * imZ < 4 && iteracio < iteraciosHatar)
    {
    // z_{n+1} = z_n * z_n + c
    ujreZ = reZ * reZ - imZ * imZ + reC;
    ujimZ = 2 * reZ * imZ + imC;
    reZ = ujreZ;
    imZ = ujimZ;

    ++iteracio;

    }
return iteracio;
}


/*
_global_ void
mandelkernel (int *kepadat)
{

int j = blockIdx.x;
int k = blockIdx.y;

kepadat[j + k * MERET] = mandel (j, k);

}
*/

_global_ void
mandelkernel (int *kepadat)
{

int tj = threadIdx.x;
int tk = threadIdx.y;

int j = blockIdx.x * 10 + tj;
int k = blockIdx.y * 10 + tk;

kepadat[j + k * MERET] = mandel (j, k);

}

void
cudamandel (int kepadat[MERET][MERET])
{

int *device_kepadat;
cudaMalloc ((void **) &device_kepadat, MERET * MERET * sizeof (int));

// dim3 grid (MERET, MERET);
// mandelkernel <<< grid, 1 >>> (device_kepadat);

dim3 grid (MERET / 10, MERET / 10);
dim3 tgrid (10, 10);
mandelkernel <<< grid, tgrid >>> (device_kepadat);  

cudaMemcpy (kepadat, device_kepadat,
        MERET * MERET * sizeof (int), cudaMemcpyDeviceToHost);
cudaFree (device_kepadat);

}

int
main (int argc, char *argv[])
{

// Mérünk időt (PP 64)
clock_t delta = clock ();
// Mérünk időt (PP 66)
struct tms tmsbuf1, tmsbuf2;
times (&tmsbuf1);

if (argc != 2)
    {
    std::cout << "Hasznalat: ./mandelpngc fajlnev";
    return -1;
    }

int kepadat[MERET][MERET];

cudamandel (kepadat);

png::image < png::rgb_pixel > kep (MERET, MERET);

for (int j = 0; j < MERET; ++j)
    {
    //sor = j;
    for (int k = 0; k < MERET; ++k)
    {
    kep.set_pixel (k, j,
            png::rgb_pixel (255 -
                    (255 * kepadat[j][k]) / ITER_HAT,
                    255 -
                    (255 * kepadat[j][k]) / ITER_HAT,
                    255 -
                    (255 * kepadat[j][k]) / ITER_HAT));
    }
    }
kep.write (argv[1]);

std::cout << argv[1] << " mentve" << std::endl;

times (&tmsbuf2);
std::cout << tmsbuf2.tms_utime - tmsbuf1.tms_utime
    + tmsbuf2.tms_stime - tmsbuf1.tms_stime << std::endl;

delta = clock () - delta;
std::cout << (float) delta / CLOCKS_PER_SEC << " sec" << std::endl;

}
]]></programlisting>
        </para>
        <para>
        Ebben a feladatban az első mandelbrotos feladatot fogjuk megoldani a CUDA segítségével.A CUDA segítségével el tudjuk azt érni, hogy a számításokat ne csak a processzerünk végezze,hanem besegítsen a videókártyánk is. A CUDA működéséhez NVIDIA videókártyára lesz szükségünk,ugyanis a CUDA-t az NVIDIA fejlesztette ki.Így a programunk sokkal gyorsabban fogja legenerálni a 600x600-as képünket.
        </para>
        <para>
          A program fordításához szükségünk lesz az nvidia-cuda-toolkit-re.Ezután a telepítés után nvcc paranccsal tudjuk majd a fordítást végrehajtani.A kód elején a DEFINE segítségével meghatározunk két állandót, az egyik a kép mérete lesz a másik pedig az iterációs határ.A mandel függvényben végezzük el a szükséges számításokat melyek majd létrehozzák a mandelbrot halmazt.Itt nem használjuk a complex header file-t, ami magától tudná kezelni a komplex számokat.A függvény előtt észrevehetjük,hogy nem simán a visszatérítési típus van megadva,hanem már megadtuk a device szócskát,amivel jelezzük,hogy a GPU befog szállni a számolásba.Mind a device illetve a global szócska arra lesz jó,hogy megadjuk,hogy ezekhez a számításokhoz szálljon be a GPU is. Ezt majd a fordítóprogram intézi el nekünk.A mandelkernel függvény fogja kiszámolni a z értékeket.A cudamandel függvényben lefoglalunk egy 600x600-as tömbnek memóriát. Majd a grid-ben megadjuk,hogy hány blokkot szertnénk létrehozni, a tgridben pedig,hogy egy blokkhoz hány szál tartozzon. Ezután ezeket átadjuk a mandel függvénynek.Ha ez megvan, felszabadítjuk a területet.A main függvény nem sokban különbözik az előző feladathoz képest,csupán annyiban,hogy futási időt is mérünk.
        </para>
        <para>
          Ez a technológia sokszor használatos képfeldolgozásnál illetve videórenderelésnél.
        </para>
        
    </section>                     

    <section>
        <title>Mandelbrot nagyító és utazó C++ nyelven</title>
        <para>
            Építs GUI-t a Mandelbrot algoritmusra, lehessen egérrel nagyítani egy területet, illetve egy pontot
            egérrel kiválasztva vizualizálja onnan a komplex iteréció bejárta z<subscript>n</subscript> komplex számokat!
        </para>

            
        <para>
            <programlisting language="c"><![CDATA[
            	#include <QApplication>
#include "frakablak.h"

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
    
    FrakAblak w1;
    w1.show();

    /*
    FrakAblak w1,
    w2(-.08292191725019529, -.082921917244591272,
       -.9662079988595939, -.9662079988551173, 600, 3000),
    w3(-.08292191724880625, -.0829219172470933,
       -.9662079988581493, -.9662079988563615, 600, 4000),
    w4(.14388310361318304, .14388310362702217,
       .6523089200729396, .6523089200854384, 600, 38655);
    w1.show();
    w2.show();
    w3.show();
    w4.show();
*/
    return a.exec();
}]]></programlisting>
        </para>
<mediaobject>
        	<imageobject condition="printf">
        		<imagedata fileref="img/kép1.png" format="PNG" scale="30"/>
        	</imageobject>
        </mediaobject> 
        <mediaobject>
        	<imageobject condition="printf">
        		<imagedata fileref="img/kép2.png" format="PNG" scale="30"/>
        	</imageobject>
        </mediaobject> 
        <para>
            A fent látható kód működéséhez szükséges telepíteni a libqt4-dev-et.Valamint szükséges összesen 5 fájl. A fájlokat az előbb említett csomaggal fogjuk összefűzni. Először qmake -project parancssal létrefogunk hozni egy .pro kiterjesztésű fájlt, ennek a fájlnak az utolsó sorába be kell írnunk a QT += widgets mondatot. Ezek után qmake *.pro paranccsal létrejön egy makefile.Majd a make parancssal létrehozzuk a futtatható fájlt. Ezután futtatva a kódot megjelenik a Mandelbrot halmaz, amiben kijelölve egy területet bele tudunk nagyítani szinte a végtelenségig. Ez látható az első és a második képen. 
        </para>
        <para>
            Megoldás forrása:  
        </para>
    </section>                     
                                                                                                                                                                            
    <section>
        <title>Mandelbrot nagyító és utazó Java nyelven</title>
        <para>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf</link>
        </para>
        <para>
       <programlisting language="c"><![CDATA[
 
public class MandelbrotHalmazNagyító extends MandelbrotHalmaz {
    private int x, y;
    private int mx, my;
    public MandelbrotHalmazNagyító(double a, double b, double c, double d,
            int szélesség, int iterációsHatár) {
        super(a, b, c, d, szélesség, iterációsHatár);
        setTitle("A Mandelbrot halmaz nagyításai");
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent m) {
                x = m.getX();
                y = m.getY();
                mx = 0;
                my = 0;
                repaint();
            }
            public void mouseReleased(java.awt.event.MouseEvent m) {
                double dx = (MandelbrotHalmazNagyító.this.b
                        - MandelbrotHalmazNagyító.this.a)
                        /MandelbrotHalmazNagyító.this.szélesség;
                double dy = (MandelbrotHalmazNagyító.this.d
                        - MandelbrotHalmazNagyító.this.c)
                        /MandelbrotHalmazNagyító.this.magasság;
                new MandelbrotHalmazNagyító(MandelbrotHalmazNagyító.this.a+x*dx,
                        MandelbrotHalmazNagyító.this.a+x*dx+mx*dx,
                        MandelbrotHalmazNagyító.this.d-y*dy-my*dy,
                        MandelbrotHalmazNagyító.this.d-y*dy,
                        600,
                        MandelbrotHalmazNagyító.this.iterációsHatár);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent m) {
                mx = m.getX() - x;
                my = m.getY() - y;
                repaint();
            }
        });
    }
    public void pillanatfelvétel() {
        java.awt.image.BufferedImage mentKép =
                new java.awt.image.BufferedImage(szélesség, magasság,
                java.awt.image.BufferedImage.TYPE_INT_RGB);
        java.awt.Graphics g = mentKép.getGraphics();
        g.drawImage(kép, 0, 0, this);
        g.setColor(java.awt.Color.BLUE);
        g.drawString("a=" + a, 10, 15);
        g.drawString("b=" + b, 10, 30);
        g.drawString("c=" + c, 10, 45);
        g.drawString("d=" + d, 10, 60);
        g.drawString("n=" + iterációsHatár, 10, 75);
        if(számításFut) {
            g.setColor(java.awt.Color.RED);
            g.drawLine(0, sor, getWidth(), sor);
        }         
        g.setColor(java.awt.Color.GREEN);
        g.drawRect(x, y, mx, my);
        g.dispose();        
        StringBuffer sb = new StringBuffer();
        sb = sb.delete(0, sb.length());
        sb.append("MandelbrotHalmazNagyitas_");
        sb.append(++pillanatfelvételSzámláló);
        sb.append("_");
        sb.append(a);
        sb.append("_");
        sb.append(b);
        sb.append("_");
        sb.append(c);
        sb.append("_");
        sb.append(d);
        sb.append(".png");
        try {
            javax.imageio.ImageIO.write(mentKép, "png",
                    new java.io.File(sb.toString()));
        } catch(java.io.IOException e) {
            e.printStackTrace();
        }
    }    
    public void paint(java.awt.Graphics g) {
         g.drawImage(kép, 0, 0, this);        
        if(számításFut) {
            g.setColor(java.awt.Color.RED);
            g.drawLine(0, sor, getWidth(), sor);
        }         
        g.setColor(java.awt.Color.GREEN);
        g.drawRect(x, y, mx, my);
    }
    public static void main(String[] args) {
        new MandelbrotHalmazNagyító(-2.0, .7, -1.35, 1.35, 600, 255);
    }
}             ]]></programlisting>     
        </para>
        <para>
          Ebben a feladatban az előző Qt-s projektetírtuk meg java-ban.A lényege annyi,hogy létrehozza a mandelbrot halmazt és bele tudunk nagyítani,illetve a nagyított képet az n betű megnyomásával élesíteni tudjuk.Ebben a programban már be van importálva egy másik program a MandelBrothalmaz.java, ezt az extend szócskával érjük el, ez olysan mintha C-ben vagy C++-ban include segítségével hozzácsatoltuk volna.A program figyeli amikor megnyomjuk az egeret,és akkor lekérdezi a koordinátákat, majd azt is figyeli mikor engedjük fel, és a két koordináta különbségéből kiszámolja,hogy hova szerettünk volna belenagyítani. A kódnak van egy kis hibája, ugyanis minden nagyításkor új ablakot nyit.Az új koordinátáknál, számol szélességet és magasságot és újra rajzolja a képet.
        </para>
    </section>

</chapter>                
