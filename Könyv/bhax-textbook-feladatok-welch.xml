<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Welch!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Első osztályom</title>
        <para>
            Valósítsd meg C++-ban és Java-ban az módosított polártranszformációs algoritmust! A matek háttér 
            teljesen irreleváns, csak annyiban érdekes, hogy az algoritmus egy számítása során két normálist
            számol ki, az egyiket elspájzolod és egy további logikai taggal az osztályban jelzed, hogy van vagy
            nincs eltéve kiszámolt szám.
        </para>
        <para>
        	<programlisting language="c"><![CDATA[
           class PolarGen
{
public:
  PolarGen()
  {
	nincsTarolt = true;
	std::srand (std::time(NULL));
  }
  ~PolarGen()
  {
  }
  double kovetkezo();
private:
  bool nincsTarolt;
  double tarolt;
};
double PolarGen::kovetkezo ()
{
  if (nincsTarolt)
  {
	double u1, u2, v1, v2, w;
        do
	  {
	    u1= std::rand() / (RAND_MAX +1.0);
	    u2= std::rand() / (RAND_MAX +1.0);
	    v1=2*u1-1;
	    v2=2*u1-1;
	    w=v1*v1+v2*v2;
           }
	while (w>1);
	double r =std::sqrt ((-2 * std::log(w)) /w);
	tarolt=r*v2;
	nincsTarolt =!nincsTarolt;
	return r* v1;
   }
   else
   {
	nincsTarolt =!nincsTarolt;
	return tarolt;
   }
}
int main (int argc, char **argv)
{
	PolarGen pg;
	for (int i= 0; i<10;++i)
	  std::cout<<pg.kovetkezo ()<< std::endl;
	return 0;
}]]></programlisting>


        </para>
        <para>
           A fenti kóddal random számokat tudunk generálni. Ezt egy osztállyal valósítottuk meg. Ennek az osztálynak van egy public illetve egy private része.A public részt a programon belül bárhonnan eltudjuk érni, a private rész viszont csak az osztályon belül lesz elérhető.A class elején van megadva a konstruktor és a destruktor. A konstruktor akkor fut le ha egy új példányt szeretnénk létrehozni ilyen típusú osztályként. A destruktor pedig törlésnél fog lefutni,ám ez az esetünkben nem lesz fontos.A kovetkezo függvénnyel fogjuk a random számokat generálni,azonban ennek a matematikai hátterével most nem fogunk foglalkozni.A konstruktor meghívásakor a nincsTarolt változó igaz lesz illetve az srand függvény meghívódik.A main függvényben létrehoztunk egy pg nevű változót amely PolargGen típusú lesz, tehát itt meghívódik majd a konstruktor. Valamint egy for ciklussal 10 random számot generálunk le.           
        </para>
        <para>
           A java kód a következőképpen néz ki:
        </para>                
         <programlisting language = "java"><![CDATA[
public class PolarGenerator
{
    boolean nincsTarolt = true;
    double tarolt;
    
    public PolarGenerator()
    {
        nincsTarolt = true;
    }
    
    public double kovetkezo() 
    {
        if(nincsTarolt)
        {
            double u1, u2, v1, v2, w;
            do{
                u1 = Math.random();
                u2 = Math.random();
                v1 = 2* u1 -1;
                v2 = 2* u2 -1;
                w = v1*v1 + v2*v2;
            } while (w>1);
            
            double r = Math.sqrt((-2 * Math.log(w) / w));
            tarolt = r * v2;
            nincsTarolt = !nincsTarolt;
            return r * v1;
        }
        else
        {
            nincsTarolt = !nincsTarolt;
            return tarolt;
        }
    }
    
    public static void main(String[] args)
    {
        PolarGenerator g = new PolarGenerator();
        for (int i = 0; i < 10; ++i)
        {
            System.out.println(g.kovetkezo());
        }
    }
}]]>
            </programlisting>
            <para>
            	Láthatólag sokkal rövidebb lett a kódunk mint c++-ban.Annyiban különbözik,hogy javaban minden egy nagy class része,még a main függvény is. Ezenkívül maga a generáló függvény teljesen ugyanaz, és maga a program is ugyanúgy működik.
            </para>

    </section>        

    <section>
        <title>LZW</title>
        <para>
            Valósítsd meg C-ben az LZW algoritmus fa-építését!
        </para>
        <para>
        <link xlink:href="https://progpater.blog.hu/2011/03/05/labormeres_otthon_avagy_hogyan_dolgozok_fel_egy_pedat?fbclid=IwAR0R_H4ol5laHPvyjt-p5MQomtcQIdfTeZvPInhgRxu-CCsxGOx453MSrGk">https://progpater.blog.hu/2011/03/05/labormeres_otthon_avagy_hogyan_dolgozok_fel_egy_pedat?fbclid=IwAR0R_H4ol5laHPvyjt-p5MQomtcQIdfTeZvPInhgRxu-CCsxGOx453MSrGk</link>
      </para>
        <para>
            <programlisting language="c"><![CDATA[
            #include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <math.h>

typedef struct binfa
{
  int ertek;
  struct binfa *bal_nulla;
  struct binfa *jobb_egy;

} BINFA, *BINFA_PTR;

BINFA_PTR
uj_elem ()
{
  BINFA_PTR p;

  if ((p = (BINFA_PTR) malloc (sizeof (BINFA))) == NULL)
    {
      perror ("memoria");
      exit (EXIT_FAILURE);
    }
  return p;
}

extern void kiir (BINFA_PTR elem);
extern void ratlag (BINFA_PTR elem);
extern void rszoras (BINFA_PTR elem);
extern void szabadit (BINFA_PTR elem);

int
main (int argc, char **argv)
{
  char b;

  BINFA_PTR gyoker = uj_elem ();
  gyoker->ertek = '/';
  gyoker->bal_nulla = gyoker->jobb_egy = NULL;
  BINFA_PTR fa = gyoker;

  while (read (0, (void *) &b, 1))
    {

      if (b == '0')
	{
	  if (fa->bal_nulla == NULL)
	    {
	      fa->bal_nulla = uj_elem ();
	      fa->bal_nulla->ertek = 0;
	      fa->bal_nulla->bal_nulla = fa->bal_nulla->jobb_egy = NULL;
	      fa = gyoker;
	    }
	  else
	    {
	      fa = fa->bal_nulla;
	    }
	}
      else
	{
	  if (fa->jobb_egy == NULL)
	    {
	      fa->jobb_egy = uj_elem ();
	      fa->jobb_egy->ertek = 1;
	      fa->jobb_egy->bal_nulla = fa->jobb_egy->jobb_egy = NULL;
	      fa = gyoker;
	    }
	  else
	    {
	      fa = fa->jobb_egy;
	    }
	}
    }

  printf ("\n");
  kiir (gyoker);
  
  extern int max_melyseg, atlagosszeg, melyseg, atlagdb;
  extern double szorasosszeg, atlag;

 

  printf ("melyseg=%d\n", max_melyseg-1);

 
  atlagosszeg = 0;
  melyseg = 0;
  atlagdb = 0;
  ratlag (gyoker);
  
  atlag = ((double)atlagosszeg) / atlagdb;

 
  atlagosszeg = 0;
  melyseg = 0;
  atlagdb = 0;
  szorasosszeg = 0.0;

  rszoras (gyoker);

  double szoras = 0.0;

  if (atlagdb - 1 > 0)
    szoras = sqrt( szorasosszeg / (atlagdb - 1));
  else
    szoras = sqrt (szorasosszeg);

  printf ("altag=%f\nszoras=%f\n", atlag, szoras);

  szabadit (gyoker);
}


 
int atlagosszeg = 0, melyseg = 0, atlagdb = 0;

void
ratlag (BINFA_PTR fa)
{

  if (fa != NULL)
    {
      ++melyseg;
      ratlag (fa->jobb_egy);
      ratlag (fa->bal_nulla);
      --melyseg;

      if (fa->jobb_egy == NULL && fa->bal_nulla == NULL)
	{

	  ++atlagdb;
	  atlagosszeg += melyseg;

	}

    }

}


double szorasosszeg = 0.0, atlag = 0.0;

void
rszoras (BINFA_PTR fa)
{

  if (fa != NULL)
    {
      ++melyseg;
      rszoras (fa->jobb_egy);
      rszoras (fa->bal_nulla);
      --melyseg;

      if (fa->jobb_egy == NULL && fa->bal_nulla == NULL)
	{

	  ++atlagdb;
	  szorasosszeg += ((melyseg - atlag) * (melyseg - atlag));

	}

    }

}


int max_melyseg = 0;

void
kiir (BINFA_PTR elem)
{
  if (elem != NULL)
    {
      ++melyseg;
      if (melyseg > max_melyseg)
	max_melyseg = melyseg;
      kiir (elem->jobb_egy);
      
      for (int i = 0; i < melyseg; ++i)
	printf ("---");
      printf ("%c(%d)\n", elem->ertek < 2 ? '0' + elem->ertek : elem->ertek,
	      melyseg-1);
      kiir (elem->bal_nulla);
      --melyseg;
    }
}

void
szabadit (BINFA_PTR elem)
{
  if (elem != NULL)
    {
      szabadit (elem->jobb_egy);
      szabadit (elem->bal_nulla);
      free (elem);
    }
}]]></programlisting>
	
        </para>
        <para>
            A fent látható program a bemenetére kapott 0-ásokból és egyesekből egy bináris fát fog alkotni.A bináris fára igaz az,hogy mindegyik csomopóntjának maximum 0,1 vagy kettő gyermeke lehet.
            A kód fordításához szükségünk lesz a -lm kapcsolóra, ennek segítségével tudjuk majd a matematikai függvényeket használni.
            Kódunk elején deklaráljuk a binfa struktúrát, a typedef segítségével. Ez tartalmazni fog egy egész értéket, illetve két mutatót. Az egyik mutató a bal oldali gyermekre fog mutatni a másik pedig a jobb oldalira.Az alatta lévő függvénnyel az új elemeknek fogjuk lefoglalni a megfelelő nagyságú memóriát, ezt a malloc segítségével tesszük meg. Ez a lefoglalt területre mutató mutatót fog visszaadni, itt vizsgáljuk azt is ha NULL pointert ad vissza,ugyanis ekkor nem tudta lefoglalni a területet és ekkor egy errort dobunk.Ezután négy függvényprototípust láthatunk. Ezután következik a  main ahol először lefoglaljuk a gyökérnek a területet értékét pedig egy / jelre állítjuk. Valamint a bal és jobb mutatóját NULL pointerre állítjuk. Majd visszaállunk a gyökérre. Ezután elkezdjük beolvasni a számokat a bemenetről.Ha nullást kapunk a bementről akkor előszőr megnézzük,hogy van-e a fának baloldali gyermeke, ha nincs akkor létrehozunk egyet ,értéke nullás lesz a pointerek pedig NULL pointerek, és a gyökér baloldali pointerét  ráállítjuk. Ha azonban már van baloldalni gyermeke akkor addig lépkedünk balra, ameddig nem lesz egy üres hely. Ha egyest kapunk a bementről akkor ugyanezeket a lépéseket tesszük meg csak a jobb oldalra.A main végén a kiir függvénnyel fogjuk kiíratni a fánkat. Ez a függvény preorder bejárás szerint fogja kiíratni a fát, a fabejárásokról a következő feladatnál beszélünk részletesebben. A szabadit függvénnyel rekurzívan fogjuk felszabadítani az összes lefoglalt területet.         
        </para>
    </section>        
        
    <section>
        <title>Fabejárás</title>
        <para>
            Járd be az előző (inorder bejárású) fát pre- és posztorder is!
        </para>
        <para>
          Tutorált: Kiss Máté
        </para>
        <para>
            Az előző programunk tökéletes lesz a fabejárások bemutatására. Csak a kiir függvényt fogjuk változtatni. Egy fát három féleképpen tudunk bejárni.Az előző kiir függvényben inorder szerint jártuk be a fát. Az az először a bal oldai részfát jártuk be inorderesen majd a gyökeret és azután a jobb oldalit inorderesen.
            Most nézzük meg preorderesen a kiir függvényt.
        </para>
        <programlisting language = "c">
          <![CDATA[
          
          void kiir(BINFA_PTR elem)
          {
           if (elem !=NULL)
            {
             ++melyseg
             if (melyseg>max_melyseg) 
              max melyseg = melyseg;
              for (int i=0; i<melyseg;i++)
              printf("---");
             printf("%c(%d)\n",elem->ertek<2 ? '0' + elem->ertek : elem->ertek, melyseg-1);
             kiir(elem->bal_nulla);
             kiir(elem->jobb_egy);
             
             
             --melyseg
            }
          }
          
          ]]>
</programlisting>
        <para>
            Itt láthatjuk,hogy először a gyökeret járjuk be, majd a baloldali részfát preorderesen, majd utoljára a jobb oldali részfát preorderesen.Az utolsó bejárási mód a postorder bejárás.Nézzük a kiir függvényt :              
        </para>
        <programlisting language = "c">
          <![CDATA[
          
          void kiir(BINFA_PTR elem)
          {
           if (elem !=NULL)
            {
             ++melyseg
             if (melyseg>max_melyseg) 
              max melyseg = melyseg;
              kiir(elem->bal_nulla);
             kiir(elem->jobb_egy);
             for (int i=0; i<melyseg;i++)
              printf("---");
             printf("%c(%d)\n",elem->ertek<2 ? '0' + elem->ertek : elem->ertek, melyseg-1);
             --melyseg
            }
          }
          
          ]]>
</programlisting>
<para>
	Itt előszőr a baloldali részfát járjuk be postorderesen majd a jobb oldali részfát ugyancsak postorderesen, és majd a legvégén a gyökeret. Észrevehetjük,hogy az összes fabejárás rekurzívan történik.
</para>
    </section>        
                        
    <section>
        <title>Tag a gyökér</title>
        <para>
            Az LZW algoritmust ültesd át egy C++ osztályba, legyen egy Tree és egy beágyazott Node
            osztálya. A gyökér csomópont legyen kompozícióban a fával!
        </para>
        <para><programlisting language = "c">
          <![CDATA[
            class LZWBinFa
        {
        public:
        LZWBinFa (char b = '/'):betu (b), balNulla (NULL), jobbEgy (NULL) {};
        ~LZWBinFa () {};
        void operator<<(char b)
    {
        if (b == '0')
        {
            // van '0'-s gyermeke az aktuális csomópontnak?
            if (!fa->nullasGyermek ()) // ha nincs, csinálunk
            {
                Csomopont *uj = new Csomopont ('0');
                fa->ujNullasGyermek (uj);
                fa = &gyoker;
            }
            else // ha van, arra lépünk
            {
                fa = fa->nullasGyermek ();
            }
        }
        else
        {
            if (!fa->egyesGyermek ())
            {
                Csomopont *uj = new Csomopont ('1');
                fa->ujEgyesGyermek (uj);
                fa = &gyoker;
            }
            else
            {
                fa = fa->egyesGyermek ();
            }
        }
    }
     class Csomopont
    {
    public:
        Csomopont (char b = '/'):betu (b), balNulla (0), jobbEgy (0) {};
        ~Csomopont () {};
        Csomopont *nullasGyermek () {
            return balNulla;
        }
        Csomopont *egyesGyermek ()
        {
            return jobbEgy;
        }
        void ujNullasGyermek (Csomopont * gy)
        {
            balNulla = gy;
        }
        void ujEgyesGyermek (Csomopont * gy)
        {
            jobbEgy = gy;
        }
    private:
        friend class LZWBinFa;
        char betu;
        Csomopont *balNulla;
        Csomopont *jobbEgy;
        Csomopont (const Csomopont &);
        Csomopont & operator=(const Csomopont &);
    }; 
     if (b == '0')
            {
            
            if (!fa->nullasGyermek ()) 
            {
                Csomopont *uj = new Csomopont ('0');
                fa->ujNullasGyermek (uj);
                fa = &gyoker;
            }
  int main ()
  {
        char b;
        LZWBinFa binFa;
        while (std::cin >> b)
        {
        binFa << b;
        }
    binFa.kiir ();
    binFa.szabadit ();
    return 0;
    }
          ]]>
</programlisting>
        </para>
        <para>
            Ez a program lényegében ugyanaz mint az előző faépítő algoritmus,csak ez c++-ban íródott. A struktúra helyett osztályt, az az class-t használunk.A kód elején megadjuk az LZWBinfa osztályunkat.Ebben beállítjuk a gyökeret illetve a gyermekeit melyek eleinte NULL pointerek lesznek. Majd ezután nézzük meg,hogy egyes vagy nullás jön-e a bemenetről és attól függően,hogy melyik jön ugyanazt csináljuk mint az előző programunkban. Itt annyi a különbség,hogy egyből a fába kerül az adott elem. Ha új csomópontot kell létrehoznunk akkor a new szóval tudjuk azt megtenni.Ugyanis létrehoztunk még egy Csomopont nevezetű osztályt.A nullasGyermek és egyesGyermek függvények az adott gyermekre mutató pointert fognak visszatérési értékként adni.az ujEgyesgyemek és ujNullasgyermek pedig paraméterként kap egy gyermeket és arra fog mutatót állítani.A main függvényünkben csak beolvassuk az adatokat a bemenetről és átadjuk az osztályoknak. Ezután kiiratjuk és a végén az összes helyet felszabadítjuk.              
        </para>
    </section>        
                
    <section>
        <title>Mutató a gyökér</title>
        <para>
            Írd át az előző forrást, hogy a gyökér csomópont ne kompozícióban, csak aggregációban legyen a 
            fával!
        </para>
        <para>
            Az előző bináris fákban a gyökerelem, tagként szerepelt. Azonban most ezt átfogjuk írni egy mutatóra. 
            Első lépésként megkeressük a protected részben a Csomopont gyokeret és mutatóvá írjuk át azt,ezt megtehetjük úgy,hogy egy csillagot teszünk elé.
        </para>
        <programlisting language = "c">
          <![CDATA[
        protected:			
    Csomopont *gyoker; 
    int maxMelyseg;
    double atlag, szoras;
          ]]>
</programlisting>


        <para>
            Ezután ha fordítjuk a programot,nagyon sok hibát fog kiírni. Ezeket kijavíthatjuk, ha minden elem.valamilyen gyermeknél a pontokat kicseréljük nyilakra.Valamint a gyokernel a referenciajeleket ki kell törölnünk.Ha ezután próbáljuk fordítani a programunkat, le fog fordulni, azonban az első futtatásnál szegmentálási fault-ot fog kidobni,ugyanis olyan memóriacímre szeretnénk hivatkozni amihez nincs jogunk.Szóval le kell foglalnunk a helyet a konstruktorral, illetve a destruktorral ki is kell majd azt törölnünk.
        </para>
        <programlisting language = "c">
          <![CDATA[
          class LZWBinFa
{
public:
    
    LZWBinFa ()
    {
gyoker= new Csomopont('/');
fa = gyoker;
    }
    ~LZWBinFa ()
    {
        szabadit (gyoker->egyesGyermek ());
        szabadit (gyoker->nullasGyermek ());
	delete(gyoker);
    }]]>
</programlisting>
<para>
	Ezután a programunk ugyanúgy fog működni mint ahogy eddig is működött.
</para>

    </section>                     

    <section>
        <title>Mozgató szemantika</title>
        <para>
            Írj az előző programhoz mozgató konstruktort és értékadást, a mozgató konstruktor legyen a mozgató
            értékadásra alapozva!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  
        </para>
    </section>                     
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
</chapter>                
